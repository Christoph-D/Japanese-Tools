#!/bin/bash
# Copyright: Christoph Dittmann <eigene_homepage@gmx.de>
# License: GNU GPL, version 3 or later; http://www.gnu.org/copyleft/gpl.html
#
# Hiragana and katakana trainer.

if [ -z "$KANA_FILE" ]; then
    echo "Please don't call this script directly, use $(dirname "$0")/hira or $(dirname "$0")/kata instead."
    exit 1
fi

SOLUTION_FILE="$DIRECTORY/solution.txt" # this file will be overwritten
LESSON_STATUS_FILE="$DIRECTORY/status.txt" # this file will be overwritten
USER_STATS_DIR="$DIRECTORY/user_statistics" # this directory will be filled with files
USER=$DMB_SENDER

DEFAULT_RESULT_ITEMS=5
MAX_RESULT_ITEMS=30
LESSON_MAP=( 5 10 15 20 25 30 35 38 43 45 46 ) # line numbers in $KANA_FILE

# Make sure we have a UTF-8 environment.
LANG=en_US.UTF-8
# Preliminary checks
if [ ! -e "$KANA_FILE" ]; then
   echo 'Please fix $KANA_FILE.'
   exit 1
fi
if [ ! -d "$USER_STATS_DIR" ]; then
   echo 'Please point $USER_STATS_DIR to an existing directory.'
   exit 2
fi
if [ -z "$USER" ]; then
    echo 'Could not determine nick name. Please fix $USER.'
    exit 1
fi

function show_help {
    # It's a German irc bot. The help message in English reads
    # "Start with \"$IRC_COMMAND <level> [count]\"."
    # "Known levels are 0 to $(expr ${#LESSON_MAP[*]} - 1)."
    # "To learn more about some level please use \"$IRC_COMMAND help <level>\"."
    # "To only see the differences between consecutive levels, please
    # use \"$IRC_COMMAND helpdiff <kevel>\"."
    echo -n "Beginnen mit \"$IRC_COMMAND <Stufe> [Anzahl]\". "
    echo -n "Bekannte Stufen sind 0 bis $(expr ${#LESSON_MAP[*]} - 1). "
    echo "Für Erklärung einer Stufe bitte \"$IRC_COMMAND help <Stufe>\" eingeben."
    echo "Um nur die neuen Zeichen einer Stufe anzuzeigen bitte \"$IRC_COMMAND helpdiff <Stufe>\" verwenden."
}

# Parameters: $LESSON_NUMBER
# Result:     $LESSON
function read_lesson {
    if [ "$LESSON_NUMBER" -ge "${#LESSON_MAP[*]}" ]; then
        LESSON_LINES=${LESSON_MAP[$(expr "${#LESSON_MAP[*]}" - 1)]}
    else
        LESSON_LINES=${LESSON_MAP[$LESSON_NUMBER]}
    fi
    LESSON=$(head -n "$LESSON_LINES" "$KANA_FILE")
}

# Parameters: $LESSON_NUMBER, $LESSON, $RESULT_LINES
function start_lesson {
    if echo "$RESULT_LINES" | grep -q -v -E '^[0-9]+$'; then
        RESULT_LINES=$DEFAULT_RESULT_ITEMS
    elif [ "$RESULT_LINES" -lt 1 ]; then
        RESULT_LINES=1
    elif [ "$RESULT_LINES" -gt "$MAX_RESULT_ITEMS" ]; then
        RESULT_LINES=$MAX_RESULT_ITEMS
    fi
    LESSON=$(echo "$LESSON" | shuf | head -n "$RESULT_LINES")

    KANA=$(echo "$LESSON" | cut -d ' ' -f 1)
    KANA=${KANA//$'\n'/ }

    echo "Leseübung: $KANA"
    echo "$LESSON" > "$SOLUTION_FILE"
    echo "$LESSON_NUMBER $RESULT_LINES" > "$LESSON_STATUS_FILE"
}
# Result: $USER_STATS
function read_user_statistics {
    USER=${USER////} # remove slashes
    USER=${USER//./} # remove dots
    USER_FILE="$USER_STATS_DIR"/"$USER"
    if [ -f "$USER_FILE" ]; then
        USER_STATS=( $(cat "$USER_FILE") )
    else
        USER_STATS=( 0 0 )
    fi
}
# Paramaters: $USER_STATS
function print_user_statistics {
    if [ "${USER_STATS[1]}" -gt 0 ]; then
        local PERCENT=$(echo "scale=2; ${USER_STATS[0]} * 100 / ${USER_STATS[1]}" | bc)
        echo "Statistik für $USER: $PERCENT% von ${USER_STATS[1]} Zeichen korrekt."
    else
        echo "Keine Statistik für $USER vorhanden."
    fi
}

if [ "$*" = "help" ]; then
    show_help
    exit 0
fi

QUERY=( $@ )
if [ "${QUERY[0]}" = "stats" ]; then
    if [ -n "${QUERY[1]}" ]; then
        USER=${QUERY[1]}
    fi
    read_user_statistics
    print_user_statistics
    exit 0
fi

QUERY_BEGIN="${QUERY[0]} ${QUERY[1]}"
if echo "$QUERY_BEGIN" | grep -q -E '^help [0-9]+$'; then
    # Lesson help
    LESSON_NUMBER=${QUERY[1]}
    read_lesson
    LESSON=${LESSON// /=}
    echo "${LESSON//$'\n'/ }"
    exit 0
elif echo "$QUERY_BEGIN" | grep -q -E '^helpdiff [0-9]+$'; then
    # Lesson helpdiff
    LESSON_NUMBER=${QUERY[1]}
    read_lesson
    LESSON_DIFF=${LESSON// /=}
    if [ "${QUERY[1]}" -gt 0 ]; then
        LESSON_NUMBER=$(expr ${QUERY[1]} - 1)
        read_lesson
        LESSON_DIFF=$(echo "$LESSON_DIFF" | tail -n +$(expr $(echo "$LESSON" | wc -l) + 1))
    fi
    LESSON_DIFF=${LESSON_DIFF//$'\n'/ }
    if [ -n "$LESSON_DIFF" ]; then
        echo "$LESSON_DIFF"
    else
        echo "Kein Diff verfügbar. :-("
    fi
    exit 0
fi

if echo "$QUERY_BEGIN" | grep -q -E '^[0-9]+'; then
    # Start new lesson.
    LESSON_NUMBER=${QUERY[0]}
    read_lesson
    RESULT_LINES=${QUERY[1]}
    start_lesson
    exit 0
fi

if [ ! -f "$SOLUTION_FILE" ]; then
    show_help
    exit 0
elif find "$SOLUTION_FILE" -maxdepth 0 -mmin +60 | grep -q -e '.'; then
    # Solution is too old.
    rm "$SOLUTION_FILE"
    show_help
    exit 0
fi

SOLUTION=( $(cut -d ' ' -f 2 "$SOLUTION_FILE") )
KANA_SOLUTION=( $(cut -d ' ' -f 1 "$SOLUTION_FILE") )
EXPECTED_NUMBER=${#SOLUTION[*]}
rm "$SOLUTION_FILE"

CORRECT=0
PRETTY_SOLUTION=
for I in $(seq 0 $(expr $EXPECTED_NUMBER - 1)); do
    EXPECTED=${SOLUTION[$I]}
    GOT=${QUERY[$I]}
    if [ "$EXPECTED" = "$GOT" ]; then
        let "++CORRECT"
    else
        PRETTY_SOLUTION="$PRETTY_SOLUTION ${KANA_SOLUTION[$I]}=$EXPECTED"
    fi
done
if [ "$CORRECT" -eq 0 ]; then
    echo -n "Leider kein einziges Zeichen korrekt. Lösung:$PRETTY_SOLUTION. "
elif [ "$CORRECT" -eq "$EXPECTED_NUMBER" ]; then
    echo -n "Alles korrekt! $CORRECT von $EXPECTED_NUMBER. "
else
    echo -n "Korrekt: $CORRECT von $EXPECTED_NUMBER, Korrekturen:$PRETTY_SOLUTION. "
fi

# update user statistics
read_user_statistics
USER_STATS[0]=$(expr ${USER_STATS[0]} + $CORRECT)
USER_STATS[1]=$(expr ${USER_STATS[1]} + $EXPECTED_NUMBER)
print_user_statistics
echo "${USER_STATS[*]}" > "$USER_FILE"

# Start new lesson.
if [ -f "$LESSON_STATUS_FILE" ]; then
    STATUS=( $(cat "$LESSON_STATUS_FILE") )
    LESSON_NUMBER=${STATUS[0]}
    RESULT_LINES=${STATUS[1]}
    read_lesson
    start_lesson
fi

exit 0
